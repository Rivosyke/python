Python Dictionary:
	
	Common Test Types:
		- Extracting the last digit in a number: <number> % 10
		- Testing for even or odd: <number> % 2 == 0 (even)

	Type Casting
		- int(): Turn a string into an int
		- str(): Turn anything into a string
	
	Numbers
		- range(start,stop,step): prints out a range of numbers, depending on the options given. 
		- min(<list>): Outputs the lowest value in the list
		- max(<list>): Outputs the highest value in the list
		- sum(<list>): Outputs the sum of all values in the list

	Commands on objects:
		- .title(): Makes first letter of a sentence upper-case
		- .lower(): Makes all string elements lower-case
		- .upper(): Makes all string elements upper-case
		- len(variable): gives the length of the variable (character length of a string or number of elements in an array)

	Loops and Decision Structures:
		- For loop: "for x in list_of_stuff"
		- If and elif: If this, then do this else if this, then do this.
		- While: Continue doing block of code until condition is met.
		- Break: Used to terminate processing of a loop.
		- Continue: Used to skip processing of the current iteration of a loop but not breaking the loop.
		
		
	Types of arrays
		- List: Single elements, uses [] notation
			- Several Way to initialize the list:
				- Direct value assignment
				- Empty list: var = []
				- Ranges (e.g. list(range(1,21)))
				- List Comprehensions (see below)
				- Assignment from another list: Use a slice - x = y[:]
				
			- Operations on the List:
				- list.append('value')
				- list.remove('value'): removes one instance of value from a list
				- list.sort(<options>): sorts the list - can use "reverse=True" to sort the list in reverse options
				- x = list(range(1,6)): Generates a list based off the output of range, which woud then just be a list of numbers
			- Accessing Elements:
				- Directly by index
				- Relative to last elements: [-2], [-3], etc
				- First 3: [:3]
				- .pop() method: Removes the last entry into the list and assigns to a variable. Good for processing a list of things in a while loop
			- List Comprehensions:
				- Turns for loop operations into single line commands
				- Forms: 
					variable = [<transform statement> <iteration> <filter>]
					variable = [<expression> <for item in list> <if conditional>]
				- Examples:
					[x.lower() for x in ["A","B","C"]] - Converts all elements in the supplied list to lowercase
					[int(x) for x in string if x.isdigit()] - Will extract numbers from a string, put them in a list, and cast them to be ints
					[x*2 for x in range(10)] - Multiples the values 0-9 by 2 and puts into a list
					[x for x in range(3,31) if x % 3 == 0] - Outputs multiples of three between 3 and 30
					[x**3 for x in range(1,11)] - Outputs the first 10 (1-10) cube values
					
		- Tuple: A list but with unchangeable values, uses () notation
		- Dictionary: Key -> Value pairs, uses {} notation - {'first': 'ryan', 'last': 'mcginn'}
			- Uses the following methods:
				- .items(): access all the elements in the dictionary
				- .values(): access just the values
				- .keys(): access just the keys
			- Looping/Processing
				- Dictionaries are not in any sort of order
				- Can pass the dictionary keys to sorted() in a for loop: sorted(dict.keys())
				- Can eliminate duplicate values by using a set: set(dict.values())
			
				
	User Input
		- input('prompt') (python 3)
		- raw_input('prompt'): Always returns a string unless casted
		
	Functions
		- Type of calling:
			- Positional Arguments: standard way, pass parameters in order of appearance in function
			- Keyword Arguements: pass parameters to explicit function arguement values in the function call - describe_pet(animal_type='hamster', pet_name='harry')
			- Default Values: no arguements passed but the function has predefined values
				- Can also have optional default values by assigning the value an empty string ('') and moving it to the end of the parameters list
				- All parameters with default values need to be after all non-default parameters in the function definition
			- Pass a copy: A list can be copied into a function by using this notatation: 
				- function_name(list_name[:])
			- Unknown number of parameters: In the function definition, use a *value to have the function make a tuple out of whatever gets passed to it (def function(*a_value))
			- Unknown number of key/value parameters: Same as above but use **value to build a dictionary of the key/value pairs given. Then accessed by (for key, value in value.items())
	
	Modules:
		- Import Methods:
			- Entire Modules:
				- Desc: This will copy all functions from the module into the program
				- format: import <module_name>
				- ex: import pizza 
				- Call with: <module_name>.<function_name>
			- Specific Functions:
				- Desc: Imports only the named function and won't require the module name to call
				- Format: from <module_name> import <function_name>
				- ex: from pizza import make_pizza
				- Call with: <function_name>(parameters)
			- All functions from a module:
				- Desc: Like the specific function import, it will make ALL functions available without the module name - dangerous if doing large modules
				- Format: from <module_name> import *
				- ex: from pizza import *
				- Call with: <function_name>(parameters)
				
		- Aliases:
			- Import specific functions and give them a different name (if there is a conflict or just want to abbreviate)
				- format: from <module> import <function_name> as <alias_name>
				- ex: from pizza import make_pizza as mp
			- Import modules and give them a different name (if the module name is long)
				- format : import <module_name> as <alias_name>
				- ex: import pizza as p
	
	Classes:
		- Declaration:
			- Desc: Begins with a capital letter by convention only
			- Format: class <Class_name> ()
			- ex: class Dog(object)
			- Notes:
				- The object in the class declaration is to make python 2.7 classes more like python 3 classes
				- Python classes attributes can be access directly by the instance. No concept of private vs public
		- Methods:
			- All class methods require at least the <self> argument. 
			- Format: <function_name> (self)
			- ex: roll_over (self)
		- Constructor
			- Desc: Initializes values during instantiation. 
			- Format: __init__ (self, <parameters>)
			- ex: __init__ (self, name, age)
			- Notes:
				- Instance variables must be declared and assigned with the following:
					- self.<variable_name> = <argument_name>
				- Returns a pointer to the new instance - gets assigned to the calling variable declaration
			
			
	
